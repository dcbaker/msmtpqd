#!/usr/bin/env python3
# encoding=utf-8
# Copyright Â© 2017-2018 Dylan Baker

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import asyncio
import enum
import json
import os
import textwrap
import uuid

import appdirs
import attr
import gbulb
import pydbus

gbulb.install()


_DIRS = appdirs.AppDirs('mailqueued')


class NMState(enum.Enum):
    """Enum representing NeteworkManagerConnection states."""
    unknown = 0
    alseep = 10
    disconnected = 20
    disconnecting = 30
    connecting = 40
    connected_local = 50
    connected_site = 60
    connected_global = 70


@attr.s(cmp=False, hash=False)
class Manager(object):
    """Class that manages whether to send or queue messages."""

    state = attr.ib(default=NMState.unknown,
                    validator=attr.validators.instance_of(NMState))
    flush_lock = attr.ib(default=attr.Factory(asyncio.Lock), init=False)
    flush_task = attr.ib(default=None, init=False)

    def __attrs_post_init__(self) -> bool:
        if not self.queueing:
            self.flush_task = asyncio.ensure_future(self.flush_queue())

    @property
    def queueing(self) -> bool:
        return self.state != NMState.connected_global

    def handle_state_change(self, state: int) -> None:
        """Signal Handler for NetworkManager state.

        This method is registered with NetworkManager over dbus. When the
        NetworkManager state changes this will be called, and it will change
        update self.state. If the state changes to connected_global it will
        also schedule to flush all queued mail.
        """
        self.state = NMState(state)
        if self.state is NMState.connected_global:
            print('Network online: Now sending messages')
            if self.flush_task is not None:
                self.flush_task.cancel()
            self.flush_task = asyncio.ensure_future(self.flush_queue())
        else:
            print('Network offline: Now queueing messages')

    async def flush_queue(self) -> None:
        """Send all queued messages."""
        try:
            async with self.flush_lock:
                for message in os.listdir(_DIRS.user_data_dir):
                    name = os.path.join(_DIRS.user_data_dir, message)
                    with open(name, 'r') as f:
                        loaded = json.load(f)

                    try:
                        proc = await asyncio.create_subprocess_exec(
                            *loaded['command'].split(' '),
                            stdin=asyncio.subprocess.PIPE)
                        await proc.communicate(input=loaded['message'].encode('utf-8'))
                    except asyncio.CancelledError:
                        raise
                    except Exception as e:
                        print('Error sending: {}'.format(name))
                        continue

                    if proc.returncode == 0:
                        os.unlink(name)
                    else:
                        print('Error sending: {}'.format(name))
        except asyncio.CancelledError:
            pass
        self.flush_task = None

    async def dispatch(self, command: str, message: str) -> None:
        """Send or queue a message."""
        if self.queueing:
            self.queue(command, message)
        else:
            for _ in range(5):
                success = await self.send(command, message)
                if success:
                    break
            else:
                self.queue(command, message)
                print('Warning: Failed to send message, queueing')
                await asyncio.sleep(120)  # wait two minutes and then try to flush the queue
                if not self.queueing:
                    await self.flush_queue()

    @staticmethod
    def queue(command: str, message: str) -> None:
        """Write a message to disk to be sent later."""
        name = os.path.join(_DIRS.user_data_dir,
                            str(uuid.uuid4()) + '.json')
        with open(name, 'w') as f:
            json.dump({'command': command, 'message': message}, f)

    async def send(self, command: str, message: str) -> bool:
        """Send a message.

        Returns True of the mail was sent successfully (returncode 0) otherwise
        False.
        """
        try:
            proc = await asyncio.create_subprocess_exec(
                *command.split(' '),
                stdin=asyncio.subprocess.PIPE)
        except FileNotFoundError:
            return False
        await proc.communicate(input=message.encode('utf-8'))
        return proc.returncode == 0


@attr.s(cmp=False, hash=False)
class Listener(object):
    """Sits on dbus and listens for incoming messages."""

    dbus = textwrap.dedent("""\
        <node>
          <interface name="com.github.dcbaker.mailqueued1.Message">
            <method name="Send">
              <arg type="s" name="command" direction="in"/>
              <arg type="s" name="message" direction="in"/>
            </method>
          </interface>
        </node>""")

    manager = attr.ib()

    def Send(self, command: str, message: str) -> None:  # pylint: disable=invalid-name
        """Public interface for sending a message."""
        asyncio.ensure_future(self.manager.dispatch(command, message))


def main() -> None:
    """Main function."""
    if not os.path.exists(_DIRS.user_data_dir):
        os.makedirs(_DIRS.user_data_dir)

    loop = asyncio.get_event_loop()

    bus = pydbus.SystemBus()
    nm = bus.get('.NetworkManager')
    manager = Manager(NMState(nm.state()))
    nm.StateChanged.connect(manager.handle_state_change)

    bus = pydbus.SessionBus()
    pub = bus.publish("com.github.dcbaker.mailqueued1.Message", Listener(manager))

    try:
        loop.run_forever()
    finally:
        loop.stop()
        pub.unpublish()


if __name__ == '__main__':
    main()
